import { whatsapp } from "./../clients/whatsapp";
import { Chat, Message } from "whatsapp-web.js";
import { promiseTracker } from "../clients/prompt";
import { sydney } from "../clients/sydney";
import { config } from "../config";
import { getAvailableTones } from "../utils";
import { jobs } from "./message";

const AVAILABLE_TONES = getAvailableTones();

function truncateWithEllipsis(input: string, maxLength: number): string {
  if (input.length <= maxLength || maxLength < 4) {
    return input;
  }

  const halfLength = Math.floor((maxLength - 3) / 2);
  const start = input.substring(0, halfLength);
  const end = input.substring(input.length - halfLength);
  return `${start} ... ${end}`;
}

async function getPendingPromptsForChat(chat: Chat) {
  const pendingPrompts = promiseTracker.listPendingPrompts();

  return pendingPrompts.filter(
    ({ data }) => data.chat.id._serialized === chat.id._serialized
  );
}

export async function handleCommand(
  message: Message,
  command: string,
  args?: string
) {
  const chat = await message.getChat();

  chat.sendSeen();
  switch (command.toLowerCase()) {
    case "!ping":
      await message.reply("*pong!*");
      break;
    case "!reset":
      await sydney.conversationsCache.delete(chat.id._serialized);
      await message.reply("Conversation history reset.");
      break;
    case "!pending":
      const pendingPromptsForChat = await getPendingPromptsForChat(chat);

      if (pendingPromptsForChat.length === 0) {
        await message.reply("There are no pending prompts.");
        break;
      }

      const pendingTexts = pendingPromptsForChat
        .map(
          ({ data }, number) => `--- Prompt ${number} ---\n${data.text}\n---`
        )
        .join("\n\n");
      const pendingTextsTruncated = truncateWithEllipsis(pendingTexts, 60);

      await message.reply(
        `These are the pending prompts:\n\n${pendingTextsTruncated}`
      );
      break;
    case "!tone":
      if (!args)
        await message.reply(
          `Current tone: *${config.toneStyle}*.\n\n` +
            "To set a different tone, pass it as a parameter to the *!tone* command (eg.: *!tone precise*).\n\n" +
            AVAILABLE_TONES
        );
      else {
        const tone = args.trim().toLowerCase();
        const isValidTone = config.VALID_TONES.includes(
          tone as (typeof config.VALID_TONES)[number]
        );

        if (isValidTone) {
          config.toneStyle = tone as typeof config.toneStyle;
          await message.reply(`Tone set to: *${config.toneStyle}*`);
        } else {
          await message.reply(
            `Tone *${tone}* is invalid.\n\n` + AVAILABLE_TONES
          );
        }
      }
      break;
    case "!help":
      // this help message was generated by Sydney
      await message.reply(
        "These are the available commands:\n\n" +
          "ðŸ‘‰ *!help* shows you this awesome help message.\n" +
          "ðŸ‘‰ *!ping* tells you if I'm still alive with a *pong!*; this should be super fast.\n" +
          "ðŸ‘‰ *!tone _args_?* lets you check or change my tone if you pass *_args_*; if you don't pass *_args_*, i will answer with the current tone and the available options. \n" +
          "ðŸ‘‰ *!pending* gives you a list of the not yet answered prompts you have in this chat.\n" +
          "ðŸ‘‰ *!reset* erases our conversation history.\n"
      );
      break;
    case "!r":
      const jobOptions = jobs
        .map((job, index) => `${index + 1} - ${job.name}`)
        .join("\n");
      await message.reply(`Job Options:\n${jobOptions}`);

      whatsapp.on("message", async (msg) => {
        //Tira isso e coloca response?
        // Check if the incoming message is from the same user and chat
        console.log("msg.from=", msg.from);
        console.log("message.from=", message.from);
        console.log("msg.getChat", msg.getChat());
        console.log("message.getChat", message.getChat());
        if (msg.from == message.from) {
          console.log("entrou!");
          const userInput = msg.body; // Extract the user's response from the message

          // Handle the selected option based on the user's response
          const selectedOption = parseInt(userInput);
          if (
            !isNaN(selectedOption) &&
            selectedOption >= 1 &&
            selectedOption <= jobs.length
          ) {
            const selectedJob = jobs[selectedOption - 1];
            const jobId = selectedJob.id;
            console.log("msg:", msg);
            await message.reply(
              `You selected option ${selectedOption}, Job ID: ${jobId}`
            );
          } else {
            await message.reply("Invalid option. Please try again.");
          }

          // Stop listening for further messages to avoid unnecessary processing
          whatsapp.removeAllListeners("message");
        }
      });

      break;
    default:
      await message.reply(`Command *${command}* unknown.`);
      break;
  }
}
