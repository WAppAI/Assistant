import { Chat, Message } from "whatsapp-web.js";
import { promiseTracker } from "../clients/prompt";
import { sydney } from "../clients/sydney";
import { config } from "../config";
import { getAvailableTones } from "../utils";
import { reminders } from "./message";

const AVAILABLE_TONES = getAvailableTones();

function truncateWithEllipsis(input: string, maxLength: number): string {
  if (input.length <= maxLength || maxLength < 4) {
    return input;
  }

  const halfLength = Math.floor((maxLength - 3) / 2);
  const start = input.substring(0, halfLength);
  const end = input.substring(input.length - halfLength);
  return `${start} ... ${end}`;
}

async function getPendingPromptsForChat(chat: Chat) {
  const pendingPrompts = promiseTracker.listPendingPrompts();

  return pendingPrompts.filter(
    ({ data }) => data.chat.id._serialized === chat.id._serialized
  );
}

export async function handleCommand(
  message: Message,
  command: string,
  args?: string
) {
  const chat = await message.getChat();

  chat.sendSeen();
  switch (command.toLowerCase()) {
    case "!ping":
      await message.reply("*pong!*");
      break;
    case "!reset":
      await sydney.conversationsCache.delete(chat.id._serialized);
      await message.reply("Conversation history reset.");
      break;
    case "!pending":
      const pendingPromptsForChat = await getPendingPromptsForChat(chat);

      if (pendingPromptsForChat.length === 0) {
        await message.reply("There are no pending prompts.");
        break;
      }

      const pendingTexts = pendingPromptsForChat
        .map(
          ({ data }, number) => `--- Prompt ${number} ---\n${data.text}\n---`
        )
        .join("\n\n");
      const pendingTextsTruncated = truncateWithEllipsis(pendingTexts, 60);

      await message.reply(
        `These are the pending prompts:\n\n${pendingTextsTruncated}`
      );
      break;
    case "!tone":
      if (!args)
        await message.reply(
          `Current tone: *${config.toneStyle}*.\n\n` +
            "To set a different tone, pass it as a parameter to the *!tone* command (eg.: *!tone precise*).\n\n" +
            AVAILABLE_TONES
        );
      else {
        const tone = args.trim().toLowerCase();
        const isValidTone = config.VALID_TONES.includes(
          tone as (typeof config.VALID_TONES)[number]
        );

        if (isValidTone) {
          config.toneStyle = tone as typeof config.toneStyle;
          await message.reply(`Tone set to: *${config.toneStyle}*`);
        } else {
          await message.reply(
            `Tone *${tone}* is invalid.\n\n` + AVAILABLE_TONES
          );
        }
      }
      break;
    case "!help":
      // this help message was generated by Sydney
      await message.reply(
        "These are the available commands:\n\n" +
          "ðŸ‘‰ *!help* shows you this awesome help message.\n" +
          "ðŸ‘‰ *!ping* tells you if I'm still alive with a *pong!*; this should be super fast.\n" +
          "ðŸ‘‰ *!tone _args_?* lets you check or change my tone if you pass *_args_*; if you don't pass *_args_*, i will answer with the current tone and the available options. \n" +
          "ðŸ‘‰ *!pending* gives you a list of the not yet answered prompts you have in this chat.\n" +
          "ðŸ‘‰ *!reset* erases our conversation history.\n"
      );
      break;
    case "!r": // !r 1, 2, 5
      const existingReminders = reminders
        .map((reminder, index) => `${index + 1} - ${reminder.name}`)
        .join("\n");

      if (!args) {
        if (existingReminders.length == 0)
          await message.reply("There are no reminders");
        else
          await message.reply(
            `To delete a reminder, you can use the command *!r 1* to delete a specific reminder listed as 1, or *!r all* to delete all reminders.\n\nCurrent reminders:\n${existingReminders}`
          );
      } else if (args === "all") {
        console.log("Delete all");
        for (const jobData of reminders) {
          jobData.job.cancel();
        }
        reminders.splice(0, reminders.length);
        await message.reply("Deleted all reminders");
      } else if (parseInt(args)) {
        console.log("Delete ", args);
        let selectedOption = parseInt(args);
        if (selectedOption >= 1 && selectedOption <= reminders.length) {
          let selectedOptionIndex = selectedOption - 1;
          let selectedJob = reminders[selectedOptionIndex];
          selectedJob.job.cancel();

          await message.reply(
            `Remind deleted: ${reminders[selectedOptionIndex].name} `
          );

          reminders.splice(selectedOptionIndex, 1);
        } else {
          await message.reply("Invalid option. Please try again.");
        }
      }

      break;
    default:
      await message.reply(`Command *${command}* unknown.`);
      break;
  }
}
